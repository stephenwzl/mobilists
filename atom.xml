<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Eleme Mobilists]]></title>
  
  <link href="/mobilists/atom.xml" rel="self"/>
  <link href="http://eleme.io/mobilists/"/>
  <updated>2016-02-12T13:28:26.000Z</updated>
  <id>http://eleme.io/mobilists/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[详解 iOS 8 `UIPresentationController` Custom Presentation]]></title>
    <link href="http://eleme.io/mobilists/2016/02/12/%E8%AF%A6%E8%A7%A3-iOS-8-UIPresentationController-custom-presentation/"/>
    <id>http://eleme.io/mobilists/2016/02/12/详解-iOS-8-UIPresentationController-custom-presentation/</id>
    <published>2016-02-12T05:28:40.000Z</published>
    <updated>2016-02-12T13:28:26.000Z</updated>
    <content type="html"><![CDATA[<p>现在大多数 app 都已经支持 iOS 7+ 有一段时间了，距离支持 iOS 8+ 的时间也是屈指可数（希望如此…）了。iOS 8 新增的 API 中有一个 <code>UIPresentationController</code> 一直比较陌生，本文将简略介绍使用 <code>UIPresentationController</code> 来实现一个自定义 presentation 的过程，然后详细解读 <code>UIKit</code> 是如何操作这一过程以及我们能够如何地参与其中。</p>
<h1 id="Final_Result"><a href="#Final_Result" class="headerlink" title="Final Result"></a>Final Result</h1><p>下图是 demo 的效果：黄色背景的 view controller （之后简称vc）present 了一个红色背景的 vc，present 的过程是自定义的，红色背景的 vc 被 present 出来后没有占满整个屏幕，周围有一圈黑色半透明背景可以透视看到黄色 vc。<br><img src="/mobilists/2016/02/12/详解-iOS-8-UIPresentationController-custom-presentation/final_result.gif" alt="最终的结果" title="最终的结果"></p>
<h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p>Demo 的效果用 iOS 7 的自定义 presentation 动画的 API 就能够实现，只需要使 presented vc 的背景色是黑色半透明，然后在上面加一个比自己 view 小一圈的红色区域就行。这里我们先不讨论为什么能够用 iOS 7 的 API 实现了，还需要用 iOS 8 的 <code>UIPresentationController</code>，直接先看如何实现。</p>
<p>我们创建一个 <code>UIPresentationController</code> 的 subclass，在其中自己管理一个 <code>dimmingView</code>（黑色半透明），并 override 一些方法，在 present 的过程中把 presented vc 的 view 的 <code>frame</code> 设置得小一些，并将其加到 <code>dimmingView</code> 上，然后把 <code>dimmingView</code> 加入到视图结构中去。</p>
<figure class="highlight swift"><figcaption><span>MyPresentationController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPresentationController</span>: <span class="title">UIPresentationController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> dimmingView = <span class="type">UIView</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">init</span>(presentedViewController: <span class="type">UIViewController</span>, presentingViewController: <span class="type">UIViewController</span>) &#123;</span><br><span class="line">    dimmingView.backgroundColor = <span class="type">UIColor</span>.blackColor().colorWithAlphaComponent(<span class="number">0.4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(presentedViewController: presentedViewController, presentingViewController: presentingViewController)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">frameOfPresentedViewInContainerView</span><span class="params">()</span></span> -&gt; <span class="type">CGRect</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> frame = containerView?.bounds &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">CGRectInset</span>(frame, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.frameOfPresentedViewInContainerView()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> containerView = containerView <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    dimmingView.frame = containerView.bounds</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionWillBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">      <span class="keyword">let</span> containerView = containerView,</span><br><span class="line">      <span class="keyword">let</span> presentedView = presentedView(),</span><br><span class="line">      <span class="keyword">let</span> coordinator = presentingViewController.transitionCoordinator()</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    dimmingView.alpha = <span class="number">0.0</span></span><br><span class="line">    containerView.addSubview(dimmingView)</span><br><span class="line">    dimmingView.addSubview(presentedView)</span><br><span class="line">    coordinator.animateAlongsideTransition(&#123; (context) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>.dimmingView.alpha = <span class="number">1.0</span></span><br><span class="line">      &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionDidEnd</span><span class="params">(completed: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !completed &#123;</span><br><span class="line">      dimmingView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionWillBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> coordinator = presentedViewController.transitionCoordinator() <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    coordinator.animateAlongsideTransition(&#123; (context) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>.dimmingView.alpha = <span class="number">0.0</span></span><br><span class="line">      &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionDidEnd</span><span class="params">(completed: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> completed &#123;</span><br><span class="line">      dimmingView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要一个 animator，涉及的都是 iOS 7 的 API，这里不多做说明。注意 <code>transitionContext.viewForKey(UITransitionContextToViewKey)</code> 是 iOS 8 新增的 API，这里必须这样来取得 <code>toView</code> 是因为 presentation controller 可能会提供并不是 presented vc 的 view 来用做 presentation。另外 <code>toView</code> 的 <code>finalFrame</code> 同样需要从 context 获取，因为 <code>finalFrame</code> 可以被 <code>UIPresentationController</code> 修改为并不是整个屏幕的大小。</p>
<figure class="highlight swift"><figcaption><span>TransitioningAnimator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitioningAnimator</span>: <span class="title">NSObject</span>, <span class="title">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">NSTimeInterval</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">      <span class="keyword">let</span> toViewController = transitionContext.viewControllerForKey(<span class="type">UITransitionContextToViewControllerKey</span>),</span><br><span class="line">      <span class="keyword">let</span> toView = transitionContext.viewForKey(<span class="type">UITransitionContextToViewKey</span>),</span><br><span class="line">      <span class="keyword">let</span> containerView = transitionContext.containerView()</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> finalFrame = transitionContext.finalFrameForViewController(toViewController)</span><br><span class="line">    toView.frame = finalFrame</span><br><span class="line">    toView.transform = <span class="type">CGAffineTransformMakeScale</span>(<span class="number">0.2</span>, <span class="number">0.2</span>)</span><br><span class="line">    toView.alpha = <span class="number">0.0</span></span><br><span class="line">    containerView.addSubview(toView)</span><br><span class="line">    </span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(transitionDuration(transitionContext), delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.5</span>, initialSpringVelocity: <span class="number">0</span>, options: [], animations: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      toView.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">      toView.alpha = <span class="number">1.0</span></span><br><span class="line">      &#125;) &#123; completed -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        transitionContext.completeTransition(completed)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还需要一个 <code>TransitioningDelegate</code>，其作用就是提供之前创建的 presentation controller 以及 animator</p>
<figure class="highlight swift"><figcaption><span>TransitioningDelegate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitioningDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIViewControllerTransitioningDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">presentationControllerForPresentedViewController</span><span class="params">(presented: UIViewController, presentingViewController presenting: UIViewController, sourceViewController source: UIViewController)</span></span> -&gt; <span class="type">UIPresentationController</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> presentationController = <span class="type">MyPresentationController</span>(presentedViewController: presented, presentingViewController: presenting)</span><br><span class="line">    <span class="keyword">return</span> presentationController</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">animationControllerForPresentedController</span><span class="params">(presented: UIViewController, presentingController presenting: UIViewController, sourceController source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> animator = <span class="type">TransitioningAnimator</span>()</span><br><span class="line">    <span class="keyword">return</span> animator;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 present 之前把 <code>TransitioningDelegate</code> 赋值给 presenting 以及 presented vc。</p>
<figure class="highlight swift"><figcaption><span>黄色vc的按钮触发的方法内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">MyViewController</span>()</span><br><span class="line"><span class="keyword">let</span> myTransitioningDelegate = <span class="type">TransitioningDelegate</span>()</span><br><span class="line">transitioningDelegate = myTransitioningDelegate</span><br><span class="line">vc.transitioningDelegate = myTransitioningDelegate</span><br><span class="line"></span><br><span class="line">presentViewController(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<p>通过以上的代码就实现了 demo 所示的效果。你肯定会问，我用 iOS 7 的 animator 一样可以做到啊，这是何苦又要多增加一个类（<code>MyPresentationController</code>）呢？下面我们详细撸一遍 iOS 8 下 present 的过程，撸完之后应该就能够理解了。</p>
<h1 id="UIPresentationController"><a href="#UIPresentationController" class="headerlink" title="UIPresentationController"></a>UIPresentationController</h1><p>为了便于参考，把 <code>UIPresentationController</code> 的 API 放在这里，可以直接跳到下一章阅读。<br><figure class="highlight swift"><figcaption><span>UIPresentationController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@available</span>(iOS <span class="number">8.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIPresentationController</span> : <span class="title">NSObject</span>, <span class="title">UIAppearanceContainer</span>, <span class="title">UITraitEnvironment</span>, <span class="title">UIContentContainer</span>, <span class="title">UIFocusEnvironment</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentingViewController: <span class="type">UIViewController</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentedViewController: <span class="type">UIViewController</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentationStyle: <span class="type">UIModalPresentationStyle</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The view in which a presentation occurs. It is an ancestor of both the presenting and presented view controller's views.</span></span><br><span class="line">    <span class="comment">// This view is being passed to the animation controller.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> containerView: <span class="type">UIView</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">public</span> <span class="keyword">var</span> delegate: <span class="type">UIAdaptivePresentationControllerDelegate</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(presentedViewController: <span class="type">UIViewController</span>, presentingViewController: <span class="type">UIViewController</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// By default this implementation defers to the delegate, if one exists, or returns the current presentation style. UIFormSheetPresentationController, and</span></span><br><span class="line">    <span class="comment">// UIPopoverPresentationController override this implementation to return UIModalPresentationStyleFullscreen if the delegate does not provide an</span></span><br><span class="line">    <span class="comment">// implementation for adaptivePresentationStyleForPresentationController:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">adaptivePresentationStyle</span><span class="params">()</span></span> -&gt; <span class="type">UIModalPresentationStyle</span></span><br><span class="line">    <span class="preprocessor">@available</span>(iOS <span class="number">8.3</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">adaptivePresentationStyleForTraitCollection</span><span class="params">(traitCollection: UITraitCollection)</span></span> -&gt; <span class="type">UIModalPresentationStyle</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewDidLayoutSubviews</span><span class="params">()</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// A view that's going to be animated during the presentation. Must be an ancestor of a presented view controller's view</span></span><br><span class="line">    <span class="comment">// or a presented view controller's view itself.</span></span><br><span class="line">    <span class="comment">// (Default: presented view controller's view)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentedView</span><span class="params">()</span></span> -&gt; <span class="type">UIView</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Position of the presented view in the container view by the end of the presentation transition.</span></span><br><span class="line">    <span class="comment">// (Default: container view bounds)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">frameOfPresentedViewInContainerView</span><span class="params">()</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// By default each new presentation is full screen.</span></span><br><span class="line">    <span class="comment">// This behavior can be overriden with the following method to force a current context presentation.</span></span><br><span class="line">    <span class="comment">// (Default: YES)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">shouldPresentInFullscreen</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Indicate whether the view controller's view we are transitioning from will be removed from the window in the end of the</span></span><br><span class="line">    <span class="comment">// presentation transition</span></span><br><span class="line">    <span class="comment">// (Default: NO)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">shouldRemovePresentersView</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionWillBegin</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionDidEnd</span><span class="params">(completed: Bool)</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionWillBegin</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionDidEnd</span><span class="params">(completed: Bool)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Modifies the trait collection for the presentation controller.</span></span><br><span class="line">    <span class="preprocessor">@NSCopying</span> <span class="keyword">public</span> <span class="keyword">var</span> overrideTraitCollection: <span class="type">UITraitCollection</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="The_Presentation_Process"><a href="#The_Presentation_Process" class="headerlink" title="The Presentation Process"></a>The Presentation Process</h1><p>我们来详细解读一下 presentation 的过程：</p>
<ol>
<li>我们初始化好将要被 present 的 vc 以及我们的 <code>TransitioningDelegate</code>，并将之赋值给 presenting 及 presented vc，然后通过我们再熟悉不过的 <code>presentViewController:animated:completion:</code> 启动 presentation。</li>
<li><code>UIKit</code> 通过 <code>presentationControllerForPresentedViewController(_:presentingViewController:sourceViewController:)</code> 来向我们的 <code>TransitioningDelegate</code> 要一个 <code>UIPresentationController</code>，在我们的实现中，我们提供了自己写的它的子类 <code>MyPresentationController</code>。</li>
<li><code>UIKit</code> 向 <code>UIPresentationController</code> 的 <code>shouldPresentInFullscreen()</code> 咨询这次 presentation 是否覆盖全屏幕。它的默认值就是 <code>true</code>。我们也可以返回 <code>false</code> 从而来一次覆盖部分屏幕的 presentation。<code>UIKit</code> 在整个 presentation 的过程中会多次咨询这个方法。</li>
<li><code>UIKit</code> 咨询 <code>adaptivePresentationStyleForTraitCollection(traitCollection:)</code> 来获取一个在特定 trait collection 下 make sense 的 presentation style。比如说在横屏的 phone 上以 popover 来 present 了一个 vc，然后切换成竖屏，考虑到竖屏下横向空间是紧凑的话可以把 popover 调整为 fullscreen。这个方法的本质是咨询 <code>UIPresentationController</code> 的 <code>delegate</code> 的 <code>adaptivePresentationStyleForPresentationController:traitCollection:</code> 来得到一个 style，如果 <code>delegate</code> 不存在的话则返回 <code>.None</code>，就是完全不适配不同的 trait collection。</li>
<li><code>UIKit</code> 向我们的 <code>TransitioningDelegate</code> 通过 <code>animationControllerForPresentedController(_:presentingController:sourceController:)</code> 要一个 animator，这里我们是提供 <code>TransitioningAnimator</code> 来实现自定义的 presentation animation。重申一下在 animator 中我们的 <code>toView</code>, <code>finalFrame</code> 之类的一切属性都要从 context 拿，不能简单地假设 frame 就是整个屏幕或者 <code>toView</code> 就是 presented vc 的 view 之类的。</li>
<li>我们的 <code>TransitioningDelegate</code> 提供了所有 <code>UIKit</code> 需要的信息，它被释放了。</li>
<li><code>UIKit</code> 向 <code>UIPresentationController</code> 的 <code>shouldRemovePresentersView()</code> 询问是不是要在 presentation 动画结束后移除掉 presenting 者的 view。我们的 presentation 完成之后是能够透过半透明的视图看到 presenting vc 的，所以应该返回 false（默认就是 false，因此不用重载）。<code>UIKit</code> 在整个 presentation 的过程中会多次咨询这个方法。</li>
<li><code>UIPresentationController</code> 的 <code>presentationTransitionWillBegin()</code> 被调用。这里我们把自己提供的 <code>dimmingView</code> 拿出来，把 presented vc 的 view 加到 <code>dimmingView</code> 上，然后把 <code>dimmingView</code> 加到 containerView 上，并且用 coordinator 来将 <code>dimmingView</code> 的 <code>alpha</code> 从 0 animate 到 1。我们在这里做的事情和 Apple 文档中写的一模一样：把自定义的 view 加入到视图结构中并且 animate 与之相关的东西。</li>
<li>在前一步中我们调用了 <code>UIPresentationController</code> 的 <code>presentedView()</code>。它默认返回 presented vc 的 view，我们可以提供一个不同的 view 来被 present，比如把 presented vc 的 view 包在一个 <code>UINavigationController</code> 的 view 内再提供出去。注意这个方法会被 <code>UIKit</code> 调用多次，所以不能在这里进行视图结构的设置，这些应该在第 8 步完成，这里需要迅速返回一个 view。额外扯一下，这是一个微妙的能力，因为国内 iOS 开发者肯定是开发 iPhone app 居多，我们在 present 一个 vc 之前是不是基本上都需要把它包在一个 <code>UINavigationController</code> 内呢？那么在 iOS 8 之后，我们可以指定 present 的 controller 是一个会把 presented vc 包装在 <code>UINavigationController</code> 内的 presentation controller，然后只管 present 就行。从实际看它省不了代码（反而还变多了…），不过从另一方面来看它解耦了代码的逻辑：vc 做的事情已经够多了，包装 presented vc 这样的杂事还是交给一个专门的 controller 来做。。。</li>
<li>然后我们的 animator 的 <code>transitionDuration(_ transitionContext:)</code> 以及 <code>animateTransition(_ transitionContext:)</code> 被调用，开始进行自定义 presentation 的动画。这里当我们从 context 中取 <code>toViewController</code> 的 <code>finalFrame</code> 时，实际是从 <code>UIPresentationController</code> 的 <code>frameOfPresentedViewInContainerView()</code> 中拿的，<code>frameOfPresentedViewInContainerView()</code> 默认返回 container view 的大小，而在我们的实现中需要 presented vc 的 view 比整个屏幕小一圈，所以我们返回一个自己算的 frame。<code>UIKit</code> 会调用 <code>frameOfPresentedViewInContainerView()</code> 多次，所以这里的计算不能太复杂。这里有个微妙的地方是：这里的 frame 是 presented view 在 container view 中的 frame，而我们实际是把 presented view 加在了自己的 <code>dimmingView</code> 上的，因此这里要注意一致性。我们的 animator 提供的自定义动画会和之前 <code>UIPresentationController</code> 中 <code>presentationTransitionWillBegin()</code> 里 coordinator 设置的动画同时进行。</li>
<li>在动画真正跑起来之前，<code>containerViewWillLayoutSubviews()</code> 以及 <code>containerViewDidLayoutSubviews()</code> 会被调用，这里 Apple 的说法是在 <code>containerViewWillLayoutSubviews()</code> 里调整自定义 view 的位置（我们的 <code>dimmingView</code>的位置就是在这里设置的），在 <code>containerViewDidLayoutSubviews()</code> 里对视图结构再作额外的调整。</li>
<li>经过我们在 animator 里设置好的时间，animator 的动画跑完了，其 completion handler 被调用。</li>
<li><code>presentationTransitionDidEnd(completed:)</code> 被调用，这里如果是未完成的话（比如是 interactive 的 presentation，人为取消了）我们需要把 <code>dimmingView</code> 移除掉，毕竟是自己加上去的。</li>
<li>至此整个 presentation 就算完成了，<code>presentViewController:animated:completion:</code> 的 completion 会被调用。</li>
<li>有趣的是，之前通过 coordinator 设置好的动画的 completion 是最后被调用的。</li>
</ol>
<p>以上就是 presentation 过程 <code>UIPresentationController</code> 在 <code>UIKit</code> 中是如何工作的详解，知道了这些，我们在使用 <code>UIPresentationController</code> 进行自定义 presentation 的过程中就能最大限度地与之配合好好工作了。</p>
<p>有 present 就要有 dismiss，dismiss 的过程与之是类似的，这里不再描述。</p>
<p><code>UIPresentationController</code> 还能通过其 <code>delegate</code> 配合设备的 trait collection 的变化进行 adaptive 的调整。</p>
<p>看到这里是不是额头上已经冒汗了？搞这么麻烦究竟是为什么啊？</p>
<h1 id="Why_3F"><a href="#Why_3F" class="headerlink" title="Why?"></a>Why?</h1><p>我对 <code>UIPresentationController</code> 的理解是逻辑的解耦。通过 <code>UIPresentationController</code>，被 present 的 vc 可以不必知道自己还需要提供一个半透明的视图能透过去看到 presenting vc，它只需要提供自己的 view 出来；而 presenting vc 也不必亲自对 presented vc 的 view 进行额外处理（比如将其 embed 到 <code>UINavigationController</code>），它只需要调用 present 就行，present 相关的逻辑都由 <code>UIPresentationController</code> 来处理；animator 纯粹就是用来 animate presentation 的过程，它不需要知道任何造成耦合的假设，任何信息都从 context 中直接拿；present 完成后，整个 presentation 的环境可以是 adaptive 的（通过 <code>UIAdaptivePresentationControllerDelegate</code>），并且这个 adaptive 的能力是由 presentation controller 提供的，被 present 的 vc 只要管好自己的 view 就行。</p>
<p>经过以上的分析，是不是能够理解 Apple 这样调整的理由了呢？</p>
<hr>
<p>Written by 饿了么iOS组 － <a href="https://github.com/axl411" target="_blank" rel="external">axl411</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在大多数 app 都已经支持 iOS 7+ 有一段时间了，距离支持 iOS 8+ 的时间也是屈指可数（希望如此…）了。iOS 8 新增的 API 中有一个 <code>UIPresentationController</code> 一直比较陌生，本文将简略介绍使用 <co]]>
    </summary>
    
      <category term="Custom Presentation" scheme="http://eleme.io/mobilists/tags/Custom-Presentation/"/>
    
      <category term="UIPresentationController" scheme="http://eleme.io/mobilists/tags/UIPresentationController/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/tags/iOS/"/>
    
      <category term="iOS 8" scheme="http://eleme.io/mobilists/tags/iOS-8/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[突破微信跳转限制－Universal Links那些坑]]></title>
    <link href="http://eleme.io/mobilists/2016/01/10/%E7%AA%81%E7%A0%B4%E5%BE%AE%E4%BF%A1%E8%B7%B3%E8%BD%AC%E9%99%90%E5%88%B6%EF%BC%8DUniversal-Links%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://eleme.io/mobilists/2016/01/10/突破微信跳转限制－Universal-Links那些坑/</id>
    <published>2016-01-10T13:43:29.000Z</published>
    <updated>2016-01-12T02:36:06.000Z</updated>
    <content type="html"><![CDATA[<p>微信屏蔽了在其内部webview中大部分URL Scheme跳转（除了一个白名单比如点评），目前突破这个限制有两种方案</p>
<ul>
<li>WXAppExtendObject: 这个用法自查</li>
<li>Universal Links: 文档在<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="external">这里</a> ，工作原理，如何实现，直接参考官方文档即可</li>
</ul>
<p>但是我们按照文档支持了Universal Links，却在iOS9.2开始发现不work了，那么下面开始尝试解决问题</p>
<h2 id="App_Search_API_Validation_Tool"><a href="#App_Search_API_Validation_Tool" class="headerlink" title="App Search API Validation Tool"></a>App Search API Validation Tool</h2><hr>
<p>apple官方有出一个工具－<a href="https://search.developer.apple.com/appsearch-validation-tool/" target="_blank" rel="external">App Search API Validation Tool</a>，这个工具可以测试网站对iOS9 search API的支持，其中包括了对Universal Links的配置检查</p>
<p>但是这个工具对我们网站检查的结果是 <code>passed</code></p>
<h2 id="iOS_u7AEF_u8868_u73B0_u5206_u6790"><a href="#iOS_u7AEF_u8868_u73B0_u5206_u6790" class="headerlink" title="iOS端表现分析"></a>iOS端表现分析</h2><hr>
<p>iOS 9.2开始具体变现如下：</p>
<ul>
<li>Safari中点击符合条件的Link，没有跳转App，但是长按链接能弹出用饿了么打开链接的选项</li>
<li>信息app内点击指定Link，works</li>
<li>微信中打开对应的web，点击符合条件的Link，没有跳转App</li>
</ul>
<p>看起来iOS 9.2肯定是有修改相关的机制，但是Apple并没有提供相应的修改说明（反正我们没有搜到），这个也符合apple一贯的作风</p>
<h2 id="u7B54_u6848"><a href="#u7B54_u6848" class="headerlink" title="答案"></a>答案</h2><p>感谢 <a href="https://dev.branch.io" target="_blank" rel="external">Branch Metrics</a>，我在<a href="https://dev.branch.io/recipes/branch_universal_links/ios/#which-appsbrowsers-support-universal-links" target="_blank" rel="external">这里</a>找到了答案</p>
<p>贴上所有的注意点</p>
<ul>
<li>Universal Links will not work if you paste the link into the browser URL field.</li>
<li>Universal Links work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click across domains. Example: if there is a Universal Link on google.com pointing to bnc.lt, it will open the app.</li>
<li>Universal Links will not work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click on the same domain. Example: if there is a Universal Link on google.com pointing to a different Universal Link on google.com, it will not open the app.</li>
<li>Universal Links cannot be triggered via Javascript (in window.onload or via a .click() call on an <code>&lt;a&gt;</code> element), unless it is part of a user action.</li>
</ul>
<p>也就是从iOS 9.2开始，在相同的domain内Universal Links是不work的，必须要跨域才生效，我们实测值需要跨子域名即可，比如 m.domain.com 跳转 o.domain.com 是可以触发跳转App</p>
<p>Written by 饿了么iOS组 － Bryan</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>微信屏蔽了在其内部webview中大部分URL Scheme跳转（除了一个白名单比如点评），目前突破这个限制有两种方案</p>
<ul>
<li>WXAppExtendObject: 这个用法自查</li>
<li>Universal Links: 文档在<a href="]]>
    </summary>
    
      <category term="Universal Links" scheme="http://eleme.io/mobilists/tags/Universal-Links/"/>
    
      <category term="Wechat" scheme="http://eleme.io/mobilists/tags/Wechat/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/tags/iOS/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://eleme.io/mobilists/2016/01/09/hello-world/"/>
    <id>http://eleme.io/mobilists/2016/01/09/hello-world/</id>
    <published>2016-01-08T16:00:00.000Z</published>
    <updated>2016-01-11T05:21:38.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
