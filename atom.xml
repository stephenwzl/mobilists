<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Eleme Mobilists]]></title>
  
  <link href="/mobilists/atom.xml" rel="self"/>
  <link href="http://eleme.io/mobilists/"/>
  <updated>2016-03-16T07:11:17.000Z</updated>
  <id>http://eleme.io/mobilists/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用UIKit Dynamics模仿UIScrollView]]></title>
    <link href="http://eleme.io/mobilists/2016/03/15/%E7%94%A8UIKit-Dynamics%E6%A8%A1%E4%BB%BFUIScrollView/"/>
    <id>http://eleme.io/mobilists/2016/03/15/用UIKit-Dynamics模仿UIScrollView/</id>
    <published>2016-03-15T10:46:06.000Z</published>
    <updated>2016-03-16T07:11:17.000Z</updated>
    <content type="html"><![CDATA[<p>饿了么在上个版本的时候对餐厅页做了很大的改动, 无论是视觉上还是交互上都有很不错的效果. 为了实现这种效果, 我们自己用UIPanGestureRecognizer和UIKit Dynamics模拟了系统的UIScrollView, 包括惯性滚动, 弹性, 橡皮筋(RubberBanding)效果.<br><img src="/mobilists/2016/03/15/用UIKit-Dynamics模仿UIScrollView/UXRecord.gif" alt="效果" title="效果"></p>
<p>在刚接到这个任务的时候, 有过几种想法:</p>
<ol>
<li>这个效果很像是UITableView加上Header的Parallel效果</li>
<li>可以在一个UIScrollView上面嵌套一个UITableView作为子视图</li>
</ol>
<p>这些方案都被否决了. 第一种方案, 因为当前页面不仅有两个TableView(食物类别和菜单), 而且要支持左右滚动在”商品”, “评价”, “详情”三个页面切换. 用TableView的header做视差效果是不太可能做到的. 对第二种方案, 是在<code>-[UIScrollViewDelegate scrollViewDidScroll:]</code>中再手动修改其中一个ScrollView的<code>contentOffset</code>, 使得当前的两个scrollView的<code>contentOffset</code>都是正确的, 但是难点是很难去指定手指在屏幕上滑动的时候, 是父view还是子view的UIPanGestureRecognizer手势被响应. 而考虑先禁用其中的一个手势(比如子view的), 先让父View的手势可以驱动父View的<code>contentOffset</code>改变, 直到父view的<code>contentOffset</code>到了某个位置再启用子view的手势, 禁用父view的. 这带来一个问题, 在切换手势的enable的时候, 即使手指没有离开屏幕, 但是手势已经禁用, 导致滚动中断, 除非手指离开屏幕后重新触摸才能再次滚动, 这样的效果比较不流畅, 并且其中的逻辑比较复杂, 不太容易处理. 或者子类UIScrollView和UITableView, 在手势代理<code>gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer</code> 返回YES, 使得两个ScrollView可以同时滚动, 然后在<code>scrollViewDidScroll:</code>中还原其中一个ScrollView的contentOffset. 但是这样导致逻辑变得复杂, 因为视图中的手势太多. 把ScrollView添加为另一个ScrollView的子视图并不推荐.</p>
<p>最后, 考虑到这个效果订制程度很高, 于是自己去模仿一下UIScrollView的特性.</p>
<p>首先说明一下视图的结构:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;ParentViewController.View&gt;</span></span><br><span class="line">   |<span class="string"> &lt;Container&gt; //UIView</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string"> &lt;SegmentView&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string"> &lt;ScrollView&gt; //仅左右滑动(pagingEnabled)</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;ChildViewController1.View&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;CategoryListView&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FoodListView&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;ChildViewController2.View&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;RatingListView&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;ChildViewController3.View&gt;</span><br><span class="line">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;SummaryListView&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>ParentViewController就是从首页Push进入的ViewController, 在它的View上放置了一个Container(一个普通的UIView), Container的上方是SegmentView,下方是一个左右滑动的ScrollView; 在ScrollView上, 从左往右放置了三个ViewController的View; 所有的tableView视图的bounce都禁用. 由于使用了AutoLayout,<br><figure class="highlight objectivec"><figcaption><span>ViewController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Container mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">   make<span class="variable">.left</span><span class="variable">.right</span><span class="variable">.bottom</span><span class="variable">.equalTo</span>(ParentViewController<span class="variable">.View</span>);     </span><br><span class="line">   make<span class="variable">.top</span><span class="variable">.equalTo</span>(ParentViewController<span class="variable">.View</span>)<span class="variable">.offset</span>(topOffset);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><br>Container的left, right, bottom都对应ParentViewController.View的left,right,bottom, 我们只需要修改topOffset对应的约束, 就可以做出如下的效果:</p>
<img src="/mobilists/2016/03/15/用UIKit-Dynamics模仿UIScrollView/UXRecord_TopConstraint.gif" alt="效果" title="效果">
<p>为了让交互的所有细节都可控, 我们要把FoodListView, RatingListView, SummaryListView的scrollEnabled设置为NO, 也就是将UIScrollView自带的panGestureRecognizer禁用, 然后在Container上加上自己的PanGestureRecognizer. 这样之后只要是和上下滚动相关的交互(tableView的滚动和Container的top的约束)都由自己实现的PanGestureRecognizer完成. 这么做有两点优势, 一是当在上下滑动的时候PanGestureRecognizer一定会触发, 并且在滑动的时候, 可以精确的控制当前手势的位移是修改Container的顶部约束还是修改当前页面的tableView的contentOffset; 二是在手势结束的时候, 可以获取最后手势的速度<code>-[UIPanGestureRecognizer velocityInView:]</code> 这方便了之后模拟惯性效果.</p>
<p>在模拟ScrollView的三个特性里面, 最简单的是RubberBanding(橡皮筋效果), 惯性滚动和弹性原理是类似的.</p>
<h1 id="RubberBanding"><a href="#RubberBanding" class="headerlink" title="RubberBanding"></a>RubberBanding</h1><p>因为只启用了自定义的pan手势, 在普通情况下, 要修改tableView的contentOffset 或者修改Container的顶部约束, 只需要在<code>pan.state == UIGestureRecognizerStateChanged</code>, 根据<code>[pan translationInView: Container].y</code>获取垂直方向的手势位移, 修改contentOffset或者约束的变化等于手势位移. 至于RubberBanding, 在垂直方向上有两种可能: Container距离顶部超过某个预设的值, 手势继续向下拖动; 或者tableView的拉到底部之后手势继续向上. 这个时候修改<code>contentOffset</code>或者顶部约束的变化小于手势位移(比如乘以一个小于1的因数), 就可以模仿出RubberBanding效果.</p>
<h1 id="u60EF_u6027__26amp_3B__u5F39_u6027"><a href="#u60EF_u6027__26amp_3B__u5F39_u6027" class="headerlink" title="惯性 &amp; 弹性"></a>惯性 &amp; 弹性</h1><p>这里说的惯性效果不仅包括模仿tableView自身的惯性减速修改<code>contentOffset</code>.<br>还包括:</p>
<ul>
<li>在手势结束之后, Container根据惯性的效果动态改变它的顶部约束.</li>
<li>Container按照惯性效果到顶部后(top约束减小, Container向上移动), 惯性效果没有消失, 继续驱动tableView的<code>contentOffset</code>修改. (速度传递)</li>
<li>tableView按照惯性减小<code>contentOffset.y</code>到0后, 惯性效果继续驱动Container修改顶部约束. (速度传递)<br>同样, 弹性效果也不只是tableView到达超过底部之后放手回弹, 也包括Container距离顶部超过一定距离之后放手回弹效果, 以及可能因为速度传递后导致的回弹.</li>
</ul>
<p>先简单的考虑只在手势结束后发生的惯性和弹性, 很幸运的是可以获取手势最后一刻的速度<code>[pan velocityInView:Container].y</code>. 第一反应是使用UIView的springAnimation, 因为它接受传入速度. 但是其他参数比如duration, 其实没有太好的方案去指定, 如果加上速度传递的效果, 它就更无能为力了. 反复滑动系统的ScrollView, 在调用栈发现它是由CADisplayLink驱动的, 发现它的行为和UIKit Dynamics的动画很符合, 而且UIKit Dynamics背后也是CADisplayLink,加上UIDynamicBehavior有个action属性:</p>
<p><code>When running, the dynamic animator calls the action block on every animation step.</code></p>
<p>在每一帧动画的时候都会调用下. 这些组合起来, 足够去模拟ScrollView的各种行为了.</p>
<p>一般我们使用UIKit Dynamics的时候, 我们是把各种Behaviour直接添加到UIView上, 然后视图就会在它到作用下动起来. 但在现在的情况下, 并不能够直接对视图添加Behaviour. 由于Behaviour实际是对遵循UIDynamicItem协议的对象做物理动画, 所以可以把contentOffset或者顶部约束的值做一层抽象. </p>
<figure class="highlight objectivec"><figcaption><span>DynamicItem</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DynamicItem</span> : <span class="title">NSObject</span>&lt;<span class="title">UIDynamicItem</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>) <span class="built_in">CGPoint</span> center;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>) <span class="built_in">CGAffineTransform</span> transform;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DynamicItem</span></span></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">	_bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>DynamicItem的实例可以看作是一个质点, 在垂直方向上, 它的位置(center)可以用来代表Container的位置(top), 也可以用来代表tableView的<code>contentOffset.y</code>, 它的<code>transform</code>属性可以不用考虑. </p>
<p>无论是修改Container的位置还是tableView的<code>contentOffset</code>, 在惯性或弹性效果的情况下, 只要在action中将约束的值或者<code>contentOffset.y</code>设置为DynamicItem的<code>center.y</code>就可以. UIKit Dynamics自己会在每一帧去修改.</p>
<p>比如惯性效果下修改Container的顶部约束大概是这样的:</p>
<figure class="highlight objectivec"><figcaption><span>ViewController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when pan.state == UIGestureRecognizerStateEnded</span></span><br><span class="line">NVMDynamicItem *item = [NVMDynamicItem new];</span><br><span class="line"><span class="comment">// topOffset表示当前Container距离顶部的距离</span></span><br><span class="line">item<span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, topOffset);</span><br><span class="line"><span class="comment">// velocity是在手势结束的时候获取的竖直方向的手势速度</span></span><br><span class="line"><span class="built_in">UIDynamicItemBehavior</span> *inertialBehavior = [[<span class="built_in">UIDynamicItemBehavior</span> alloc] initWithItems:@[ item ]];</span><br><span class="line">  [inertialBehavior addLinearVelocity:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, velocity) forItem:item];</span><br><span class="line">  <span class="comment">// 通过尝试取2.0比较像系统的效果</span></span><br><span class="line">  inertialBehavior<span class="variable">.resistance</span> = <span class="number">2.0</span>; </span><br><span class="line">  inertialBehavior<span class="variable">.action</span> = ^&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> itemTop = item<span class="variable">.center</span><span class="variable">.y</span>;</span><br><span class="line">    [Container mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">      make<span class="variable">.top</span><span class="variable">.equalTo</span>(ParentViewController<span class="variable">.View</span>)<span class="variable">.offset</span>(itemTop);</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;;</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.animator</span> addBehavior:inertialBehavior];</span><br></pre></td></tr></table></figure>
<p>类似的弹性效果只需使用UIAttachmentBehavior并且设置合适的值, 尝试下来length = 0, damping = 1, frequency = 1.6, 就有不错的回弹效果.<br>修改contentOffset也是类似, 只不过是将在action中修改约束的部分改为修改contentOffset.</p>
<p>对于速度传递, 完全一样的原理, 唯一的变化就是从获取手势的速度变为获取<code>-[UIDynamicItemBehavior linearVelocityForItem]</code>的线速度, 然后UIDynamicAnimator移除不需要的动画, 按照上面的例子传入速度再次做惯性动画. </p>
<p>甚至还可以把UIAttachmentBehavior和UIDynamicItemBehavior同时使用, 模仿有初速度的回弹效果.</p>
<p>大致的思路就是这样, 只需要注意什么时候调用<code>-[UIDynamicAnimator removeBehavior]</code>停止动画(比如手势刚开始的时候), 以及action中注意retain cycle.</p>
<p>有个2014年的<a href="http://holko.pl/2014/07/06/inertia-bouncing-rubber-banding-uikit-dynamics/" target="_blank" rel="external">博客</a>已经有了类似的例子, 只是交互简单一些, 原理是一样的.</p>
<p>而在运用自己的手势去实现ScrollView之后, 碰到了一些细节问题.</p>
<ol>
<li>自己加到Container上的手势, 很容易误触发tableView的<code>-tableView:didSelectRowAtIndexPath:indexPath</code>协议方法, 导致很容易Push到下一个页面, 很影响使用. 解决的原理比较简单, 在合适的时机将当前的tableView.userInteractionEnabled设置为NO, 之后在需要的时候恢复. 正好UIDynamicAnimatorDelegate提供了动画将要开始<code>dynamicAnimatorWillResume:</code>和暂停(包括移除bahaviour)<code>dynamicAnimatorDidPause:</code>的回调. 就在这两个地方分别设置, 效果还可以接受.</li>
<li>当tableView在UIKit Dynamics的作用下滚动时, 或者是快速上下滑动的时候, 很容易触发左右滑动的ScrollView切换页面. 解决方案比较tricky: 自定义了UIScrollView的子类, 在子类中将gestureRecognizerShouldBegin:重写, 对于panGestureRecognizer的情况, 在它的水平速度和垂直速度的夹角在一定范围内强制返回NO. 这样就大大减小了误触发左右滚动的操作. 但是还是希望有更好的解决方案.</li>
<li>还有一个很常见的问题, 点击状态栏, 正常情况下系统能够将ScrollView滚动到顶部, 而在一个Window中有多个ScrollView的时候, 它是不一定成功的. 正确的解决方案应该是将当前页面需要响应系统statusBar点击的ScrollView的<code>scrollsToTop</code>设置为YES, 其他都设置为NO, 并且<code>scrollsToTop</code>为YES的只能有一个, 这种情况下理论上是可以work的. 但是在解决第一个问题的时候, 导致了这种解决方法有时候不成功. 因为发现在一个UIScrollView的<code>userInteractionEnabled == NO</code>的时候, 状态栏点击返回顶部效果是无效的(比如正在惯性滚动的时候, 状态还是NO, 这个时候点击statusBar); 加上在最左边的页面有两个tableView需要同时滚动到顶部. 只能换个解决方案. 子类化了全局的UIWindow, 重写它的<code>-pointInside:withEvent:</code>, 在statusBar区域被点击的时候发出通知, 监听到后手动设置contentOffset到0. </li>
<li>由于之前很多控件是AutoLayout写的, 比如cell, 因为现在实现的方案会频繁修改约束, 导致滑动很卡(之前在iPhone 6就感受到卡顿了). 之后用手动布局改了一部分cell, 确实流畅了很多.</li>
</ol>
<p>虽然UIKit Dynamics平时很少用到, 不过在关键时刻也发挥了巨大的作用, 很好奇Apple在实现UIScrollView会不会也用到了它.</p>
<hr>
<p>Written by 饿了么iOS组 － <a href="https://github.com/philcai1993" target="_blank" rel="external">PhilCai</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>饿了么在上个版本的时候对餐厅页做了很大的改动, 无论是视觉上还是交互上都有很不错的效果. 为了实现这种效果, 我们自己用UIPanGestureRecognizer和UIKit Dynamics模拟了系统的UIScrollView, 包括惯性滚动, 弹性, 橡皮筋(Rubb]]>
    </summary>
    
      <category term="UIKit Dynamics" scheme="http://eleme.io/mobilists/tags/UIKit-Dynamics/"/>
    
      <category term="UIScrollView" scheme="http://eleme.io/mobilists/tags/UIScrollView/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/tags/iOS/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android APP 瘦身]]></title>
    <link href="http://eleme.io/mobilists/2016/02/25/android-APP-%E7%98%A6%E8%BA%AB/"/>
    <id>http://eleme.io/mobilists/2016/02/25/android-APP-瘦身/</id>
    <published>2016-02-25T09:18:09.000Z</published>
    <updated>2016-03-14T03:24:40.000Z</updated>
    <content type="html"><![CDATA[<p>随着饿了么业务的快速发展，直接面向用户的APP的功能也越来越多，APP的体积也随之增长。虽然我们研发一直在有意识的从代码和资源角度打磨产品，但是仍是不能比较可观的抑制体积的增长，经历整个2015年多个版本的迭代，增长了一倍不止。所以到了这个时候，为了更小的减少用户升级更新的成本，APP瘦身之旅势在必行。下面将根据不同的瘦身角度来实战分析。 </p>
<h2 id="1_u3001PNG"><a href="#1_u3001PNG" class="headerlink" title="1、PNG"></a>1、PNG</h2><p>  1.切图只要xxhdpi<br>      基于数据分析，绝大多数用户的设备分辨率都是2x、3x，<br>      在切图方面只选取xxhdpi一套图，通过在不同分辨率的机器上测试，UI效果以及内存开销都可以接受</p>
<p>2.切图技巧<br>      大尺寸的切图，可考虑分切成多个小图片<br>      不需要alpha通道的图片，可以考虑使用jpg<br>      如果minsdk为4.2.1+，可以考虑把png全部换成webp；低版本可以通过第三方webp解码lib使用</p>
<p>  3.切图压缩<br>      切图统一压缩，以防万一，在release打包的时候，再一次性压缩。<br>      压缩的工具可以选取<a href="https://tinypng.com/" target="_blank" rel="external">TinyPng</a> 、<a href="http://www.imagemagick.org/" target="_blank" rel="external">ImageMagick</a>（可以封装成GUI/command tool/gradle task）</p>
<p>   4.SVG/Vector Drawable<br>      自Lollipop开始，Android已经支持<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/VectorDrawable.html" target="_blank" rel="external">VectorDrawable</a>和<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/AnimatedVectorDrawable.html" target="_blank" rel="external">AnimatedVectorDrawable</a>，这个通过xml文本file完成原来切图png的功能，切图的工作基本就被托管了<br>      Lollipop以下，更新你的support library到<a href="http://android-developers.blogspot.com/2016/02/android-support-library-232.html" target="_blank" rel="external">23.2</a>，VectorDrawableCompat已经可以兼容到api7了，AnimatedVectorDrawableCompat兼容到api11</p>
<p>   5.删除无用资源<br>      通过<strong>lint</strong>发现无用资源删除<br>      android gradle plugin 开启<a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking" target="_blank" rel="external">shrinkResources</a><br>      …</p>
<h2 id="2_u3001_u8D44_u6E90res"><a href="#2_u3001_u8D44_u6E90res" class="headerlink" title="2、资源res"></a>2、资源res</h2><p>有同学会有疑问，res混淆和APP瘦身有什么关系呢？<br>这就需要大家对Android中资源的查找有一定的了解，code通过R文件中的常量值访问资源，但是是如何映射到具体的资源文件上的呢？这里就需要介绍resources.arsc，简单理解这是一个二进制文件，负责存储res资源的映射关系。如果我们精简资源的路径，如把res/drawable-xxhdpi/hello.png转为 a/z/p.png，这样的话resources.arsc中存储的信息量就会变少，对应的体积就会缩小。<br>    目前这种思路有开源的方案，可参考<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">AndResGuard</a></p>
<h2 id="3_u3001jniLibs"><a href="#3_u3001jniLibs" class="headerlink" title="3、jniLibs"></a>3、jniLibs</h2><p>根据业务面向的用户及设备，可考虑移除mips、x86平台的so</p>
<p>64位的cpu会兼容32位，可以考虑不保留armeabi-64</p>
<p>主流的arm架构有armv5、armv7、armv8，而它们是向后兼容的。在计算性能可接受的情况下，只保留armeabi一个；armv7加了FPU，大大提升了浮点运算的效率，必要时也可放入armeabi，在使用的时候手动去基于cpu abi手动load</p>
<p>应用市场升级安装，我们无法把控具体升级的机器cpu abi。但是如果APP内升级的话，我们可以通过<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits" target="_blank" rel="external">ABIs Splits</a>打出多个apk升级包，基于不同的abi分发不同的最新apk</p>
<p>如果so文件体积比较大的情况下，可不打入apk中，后面通过在线加载后再手动load。一个比较典型的场景就是集成自定义WebView的时候，内核so的体积很大，高达10MB+，这个时候WIFI在线load就是个不错的方案</p>
<p>优化native code。native code会直接影响so的大小，所以从根源上做努力很有必要，比如Do not use Exceptions and RTTI。具体参考<a href="https://blog.algolia.com/android-ndk-how-to-reduce-libs-size/" target="_blank" rel="external">Link</a></p>
<h2 id="4_u3001proguard"><a href="#4_u3001proguard" class="headerlink" title="4、proguard"></a>4、proguard</h2><p>不知道大家有没有注意到，打包的code文件中包含很多的信息，其中有个就是 <strong>LineNumber</strong><br>这个有什么作用呢，就是记录code对应的行号，执行过程中没啥意义。但是如果遇到crash，抓取stack trace去分析的时候，就可以具体到哪一行出了问题。<br>如果你足够丧心病狂、足够对code有信心的话，你可以移除<strong>LineNumber</strong>信息。</p>
<h2 id="5_u3001library"><a href="#5_u3001library" class="headerlink" title="5、library"></a>5、library</h2><p>debug依赖的lib，统一在release时不打进APK，或者依赖的lib提供一套空实现<br>大而全的Llbrary的引入有谨慎，guava这样的库就算了。如果你只用到一小部分功能，可以考虑自己做个抽取，或者替换为一个更精小的lib<br>时刻关注library的依赖关系，别一个小lib直接或间接的依赖着一个超大的<br>在重构过程中，记得check下是否有可以删除的lib      </p>
<h2 id="6_u3001online_load"><a href="#6_u3001online_load" class="headerlink" title="6、online load"></a>6、online load</h2><p>上面提到过一些，这里详细列举下<br>资源加载：大的图片、db文件、so等<br>code加载：即插件化，在线download jar再load，目前有很多开源项目可参考</p>
<p>以上所列举的措施很多，在瘦身的过程中，基于自身的业务及需求，考虑选取合适的建议。我们饿了么APP这边的目标就是在满足业务的前提下，力求压缩到极致，同时也实现瘦身自动化。在持续优化的过程中，我们团队内部也逐渐积累了一些工具和lib，我们会在合适的时候给开源出来，有兴趣的同学持续关注。</p>
<p><strong>希望我们的经验能给有需求的同学一些参考和启发，也欢迎大家积极comment</strong></p>
<p><strong>APP瘦身是一条持续优化的路，这关乎产品，更关乎情怀</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着饿了么业务的快速发展，直接面向用户的APP的功能也越来越多，APP的体积也随之增长。虽然我们研发一直在有意识的从代码和资源角度打磨产品，但是仍是不能比较可观的抑制体积的增长，经历整个2015年多个版本的迭代，增长了一倍不止。所以到了这个时候，为了更小的减少用户升级更新的]]>
    </summary>
    
      <category term="APP 瘦身" scheme="http://eleme.io/mobilists/tags/APP-%E7%98%A6%E8%BA%AB/"/>
    
      <category term="Android" scheme="http://eleme.io/mobilists/tags/Android/"/>
    
      <category term="Shrink" scheme="http://eleme.io/mobilists/tags/Shrink/"/>
    
      <category term="Android" scheme="http://eleme.io/mobilists/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解 iOS 8 `UIPresentationController` Custom Presentation]]></title>
    <link href="http://eleme.io/mobilists/2016/02/12/%E8%AF%A6%E8%A7%A3-iOS-8-UIPresentationController-custom-presentation/"/>
    <id>http://eleme.io/mobilists/2016/02/12/详解-iOS-8-UIPresentationController-custom-presentation/</id>
    <published>2016-02-12T05:28:40.000Z</published>
    <updated>2016-02-12T13:28:26.000Z</updated>
    <content type="html"><![CDATA[<p>现在大多数 app 都已经支持 iOS 7+ 有一段时间了，距离支持 iOS 8+ 的时间也是屈指可数（希望如此…）了。iOS 8 新增的 API 中有一个 <code>UIPresentationController</code> 一直比较陌生，本文将简略介绍使用 <code>UIPresentationController</code> 来实现一个自定义 presentation 的过程，然后详细解读 <code>UIKit</code> 是如何操作这一过程以及我们能够如何地参与其中。</p>
<h1 id="Final_Result"><a href="#Final_Result" class="headerlink" title="Final Result"></a>Final Result</h1><p>下图是 demo 的效果：黄色背景的 view controller （之后简称vc）present 了一个红色背景的 vc，present 的过程是自定义的，红色背景的 vc 被 present 出来后没有占满整个屏幕，周围有一圈黑色半透明背景可以透视看到黄色 vc。<br><img src="/mobilists/2016/02/12/详解-iOS-8-UIPresentationController-custom-presentation/final_result.gif" alt="最终的结果" title="最终的结果"></p>
<h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p>Demo 的效果用 iOS 7 的自定义 presentation 动画的 API 就能够实现，只需要使 presented vc 的背景色是黑色半透明，然后在上面加一个比自己 view 小一圈的红色区域就行。这里我们先不讨论为什么能够用 iOS 7 的 API 实现了，还需要用 iOS 8 的 <code>UIPresentationController</code>，直接先看如何实现。</p>
<p>我们创建一个 <code>UIPresentationController</code> 的 subclass，在其中自己管理一个 <code>dimmingView</code>（黑色半透明），并 override 一些方法，在 present 的过程中把 presented vc 的 view 的 <code>frame</code> 设置得小一些，并将其加到 <code>dimmingView</code> 上，然后把 <code>dimmingView</code> 加入到视图结构中去。</p>
<figure class="highlight swift"><figcaption><span>MyPresentationController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPresentationController</span>: <span class="title">UIPresentationController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> dimmingView = <span class="type">UIView</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">init</span>(presentedViewController: <span class="type">UIViewController</span>, presentingViewController: <span class="type">UIViewController</span>) &#123;</span><br><span class="line">    dimmingView.backgroundColor = <span class="type">UIColor</span>.blackColor().colorWithAlphaComponent(<span class="number">0.4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(presentedViewController: presentedViewController, presentingViewController: presentingViewController)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">frameOfPresentedViewInContainerView</span><span class="params">()</span></span> -&gt; <span class="type">CGRect</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> frame = containerView?.bounds &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">CGRectInset</span>(frame, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.frameOfPresentedViewInContainerView()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> containerView = containerView <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    dimmingView.frame = containerView.bounds</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionWillBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">      <span class="keyword">let</span> containerView = containerView,</span><br><span class="line">      <span class="keyword">let</span> presentedView = presentedView(),</span><br><span class="line">      <span class="keyword">let</span> coordinator = presentingViewController.transitionCoordinator()</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    dimmingView.alpha = <span class="number">0.0</span></span><br><span class="line">    containerView.addSubview(dimmingView)</span><br><span class="line">    dimmingView.addSubview(presentedView)</span><br><span class="line">    coordinator.animateAlongsideTransition(&#123; (context) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>.dimmingView.alpha = <span class="number">1.0</span></span><br><span class="line">      &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionDidEnd</span><span class="params">(completed: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !completed &#123;</span><br><span class="line">      dimmingView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionWillBegin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> coordinator = presentedViewController.transitionCoordinator() <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    coordinator.animateAlongsideTransition(&#123; (context) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>.dimmingView.alpha = <span class="number">0.0</span></span><br><span class="line">      &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionDidEnd</span><span class="params">(completed: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> completed &#123;</span><br><span class="line">      dimmingView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要一个 animator，涉及的都是 iOS 7 的 API，这里不多做说明。注意 <code>transitionContext.viewForKey(UITransitionContextToViewKey)</code> 是 iOS 8 新增的 API，这里必须这样来取得 <code>toView</code> 是因为 presentation controller 可能会提供并不是 presented vc 的 view 来用做 presentation。另外 <code>toView</code> 的 <code>finalFrame</code> 同样需要从 context 获取，因为 <code>finalFrame</code> 可以被 <code>UIPresentationController</code> 修改为并不是整个屏幕的大小。</p>
<figure class="highlight swift"><figcaption><span>TransitioningAnimator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitioningAnimator</span>: <span class="title">NSObject</span>, <span class="title">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">NSTimeInterval</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">      <span class="keyword">let</span> toViewController = transitionContext.viewControllerForKey(<span class="type">UITransitionContextToViewControllerKey</span>),</span><br><span class="line">      <span class="keyword">let</span> toView = transitionContext.viewForKey(<span class="type">UITransitionContextToViewKey</span>),</span><br><span class="line">      <span class="keyword">let</span> containerView = transitionContext.containerView()</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> finalFrame = transitionContext.finalFrameForViewController(toViewController)</span><br><span class="line">    toView.frame = finalFrame</span><br><span class="line">    toView.transform = <span class="type">CGAffineTransformMakeScale</span>(<span class="number">0.2</span>, <span class="number">0.2</span>)</span><br><span class="line">    toView.alpha = <span class="number">0.0</span></span><br><span class="line">    containerView.addSubview(toView)</span><br><span class="line">    </span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(transitionDuration(transitionContext), delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.5</span>, initialSpringVelocity: <span class="number">0</span>, options: [], animations: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      toView.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">      toView.alpha = <span class="number">1.0</span></span><br><span class="line">      &#125;) &#123; completed -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        transitionContext.completeTransition(completed)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还需要一个 <code>TransitioningDelegate</code>，其作用就是提供之前创建的 presentation controller 以及 animator</p>
<figure class="highlight swift"><figcaption><span>TransitioningDelegate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitioningDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIViewControllerTransitioningDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">presentationControllerForPresentedViewController</span><span class="params">(presented: UIViewController, presentingViewController presenting: UIViewController, sourceViewController source: UIViewController)</span></span> -&gt; <span class="type">UIPresentationController</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> presentationController = <span class="type">MyPresentationController</span>(presentedViewController: presented, presentingViewController: presenting)</span><br><span class="line">    <span class="keyword">return</span> presentationController</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">animationControllerForPresentedController</span><span class="params">(presented: UIViewController, presentingController presenting: UIViewController, sourceController source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> animator = <span class="type">TransitioningAnimator</span>()</span><br><span class="line">    <span class="keyword">return</span> animator;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 present 之前把 <code>TransitioningDelegate</code> 赋值给 presenting 以及 presented vc。</p>
<figure class="highlight swift"><figcaption><span>黄色vc的按钮触发的方法内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">MyViewController</span>()</span><br><span class="line"><span class="keyword">let</span> myTransitioningDelegate = <span class="type">TransitioningDelegate</span>()</span><br><span class="line">transitioningDelegate = myTransitioningDelegate</span><br><span class="line">vc.transitioningDelegate = myTransitioningDelegate</span><br><span class="line"></span><br><span class="line">presentViewController(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<p>通过以上的代码就实现了 demo 所示的效果。你肯定会问，我用 iOS 7 的 animator 一样可以做到啊，这是何苦又要多增加一个类（<code>MyPresentationController</code>）呢？下面我们详细撸一遍 iOS 8 下 present 的过程，撸完之后应该就能够理解了。</p>
<h1 id="UIPresentationController"><a href="#UIPresentationController" class="headerlink" title="UIPresentationController"></a>UIPresentationController</h1><p>为了便于参考，把 <code>UIPresentationController</code> 的 API 放在这里，可以直接跳到下一章阅读。<br><figure class="highlight swift"><figcaption><span>UIPresentationController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@available</span>(iOS <span class="number">8.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIPresentationController</span> : <span class="title">NSObject</span>, <span class="title">UIAppearanceContainer</span>, <span class="title">UITraitEnvironment</span>, <span class="title">UIContentContainer</span>, <span class="title">UIFocusEnvironment</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentingViewController: <span class="type">UIViewController</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentedViewController: <span class="type">UIViewController</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> presentationStyle: <span class="type">UIModalPresentationStyle</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The view in which a presentation occurs. It is an ancestor of both the presenting and presented view controller's views.</span></span><br><span class="line">    <span class="comment">// This view is being passed to the animation controller.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> containerView: <span class="type">UIView</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">public</span> <span class="keyword">var</span> delegate: <span class="type">UIAdaptivePresentationControllerDelegate</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(presentedViewController: <span class="type">UIViewController</span>, presentingViewController: <span class="type">UIViewController</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// By default this implementation defers to the delegate, if one exists, or returns the current presentation style. UIFormSheetPresentationController, and</span></span><br><span class="line">    <span class="comment">// UIPopoverPresentationController override this implementation to return UIModalPresentationStyleFullscreen if the delegate does not provide an</span></span><br><span class="line">    <span class="comment">// implementation for adaptivePresentationStyleForPresentationController:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">adaptivePresentationStyle</span><span class="params">()</span></span> -&gt; <span class="type">UIModalPresentationStyle</span></span><br><span class="line">    <span class="preprocessor">@available</span>(iOS <span class="number">8.3</span>, *)</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">adaptivePresentationStyleForTraitCollection</span><span class="params">(traitCollection: UITraitCollection)</span></span> -&gt; <span class="type">UIModalPresentationStyle</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">containerViewDidLayoutSubviews</span><span class="params">()</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// A view that's going to be animated during the presentation. Must be an ancestor of a presented view controller's view</span></span><br><span class="line">    <span class="comment">// or a presented view controller's view itself.</span></span><br><span class="line">    <span class="comment">// (Default: presented view controller's view)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentedView</span><span class="params">()</span></span> -&gt; <span class="type">UIView</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Position of the presented view in the container view by the end of the presentation transition.</span></span><br><span class="line">    <span class="comment">// (Default: container view bounds)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">frameOfPresentedViewInContainerView</span><span class="params">()</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// By default each new presentation is full screen.</span></span><br><span class="line">    <span class="comment">// This behavior can be overriden with the following method to force a current context presentation.</span></span><br><span class="line">    <span class="comment">// (Default: YES)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">shouldPresentInFullscreen</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Indicate whether the view controller's view we are transitioning from will be removed from the window in the end of the</span></span><br><span class="line">    <span class="comment">// presentation transition</span></span><br><span class="line">    <span class="comment">// (Default: NO)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">shouldRemovePresentersView</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionWillBegin</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">presentationTransitionDidEnd</span><span class="params">(completed: Bool)</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionWillBegin</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">dismissalTransitionDidEnd</span><span class="params">(completed: Bool)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Modifies the trait collection for the presentation controller.</span></span><br><span class="line">    <span class="preprocessor">@NSCopying</span> <span class="keyword">public</span> <span class="keyword">var</span> overrideTraitCollection: <span class="type">UITraitCollection</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="The_Presentation_Process"><a href="#The_Presentation_Process" class="headerlink" title="The Presentation Process"></a>The Presentation Process</h1><p>我们来详细解读一下 presentation 的过程：</p>
<ol>
<li>我们初始化好将要被 present 的 vc 以及我们的 <code>TransitioningDelegate</code>，并将之赋值给 presenting 及 presented vc，然后通过我们再熟悉不过的 <code>presentViewController:animated:completion:</code> 启动 presentation。</li>
<li><code>UIKit</code> 通过 <code>presentationControllerForPresentedViewController(_:presentingViewController:sourceViewController:)</code> 来向我们的 <code>TransitioningDelegate</code> 要一个 <code>UIPresentationController</code>，在我们的实现中，我们提供了自己写的它的子类 <code>MyPresentationController</code>。</li>
<li><code>UIKit</code> 向 <code>UIPresentationController</code> 的 <code>shouldPresentInFullscreen()</code> 咨询这次 presentation 是否覆盖全屏幕。它的默认值就是 <code>true</code>。我们也可以返回 <code>false</code> 从而来一次覆盖部分屏幕的 presentation。<code>UIKit</code> 在整个 presentation 的过程中会多次咨询这个方法。</li>
<li><code>UIKit</code> 咨询 <code>adaptivePresentationStyleForTraitCollection(traitCollection:)</code> 来获取一个在特定 trait collection 下 make sense 的 presentation style。比如说在横屏的 phone 上以 popover 来 present 了一个 vc，然后切换成竖屏，考虑到竖屏下横向空间是紧凑的话可以把 popover 调整为 fullscreen。这个方法的本质是咨询 <code>UIPresentationController</code> 的 <code>delegate</code> 的 <code>adaptivePresentationStyleForPresentationController:traitCollection:</code> 来得到一个 style，如果 <code>delegate</code> 不存在的话则返回 <code>.None</code>，就是完全不适配不同的 trait collection。</li>
<li><code>UIKit</code> 向我们的 <code>TransitioningDelegate</code> 通过 <code>animationControllerForPresentedController(_:presentingController:sourceController:)</code> 要一个 animator，这里我们是提供 <code>TransitioningAnimator</code> 来实现自定义的 presentation animation。重申一下在 animator 中我们的 <code>toView</code>, <code>finalFrame</code> 之类的一切属性都要从 context 拿，不能简单地假设 frame 就是整个屏幕或者 <code>toView</code> 就是 presented vc 的 view 之类的。</li>
<li>我们的 <code>TransitioningDelegate</code> 提供了所有 <code>UIKit</code> 需要的信息，它被释放了。</li>
<li><code>UIKit</code> 向 <code>UIPresentationController</code> 的 <code>shouldRemovePresentersView()</code> 询问是不是要在 presentation 动画结束后移除掉 presenting 者的 view。我们的 presentation 完成之后是能够透过半透明的视图看到 presenting vc 的，所以应该返回 false（默认就是 false，因此不用重载）。<code>UIKit</code> 在整个 presentation 的过程中会多次咨询这个方法。</li>
<li><code>UIPresentationController</code> 的 <code>presentationTransitionWillBegin()</code> 被调用。这里我们把自己提供的 <code>dimmingView</code> 拿出来，把 presented vc 的 view 加到 <code>dimmingView</code> 上，然后把 <code>dimmingView</code> 加到 containerView 上，并且用 coordinator 来将 <code>dimmingView</code> 的 <code>alpha</code> 从 0 animate 到 1。我们在这里做的事情和 Apple 文档中写的一模一样：把自定义的 view 加入到视图结构中并且 animate 与之相关的东西。</li>
<li>在前一步中我们调用了 <code>UIPresentationController</code> 的 <code>presentedView()</code>。它默认返回 presented vc 的 view，我们可以提供一个不同的 view 来被 present，比如把 presented vc 的 view 包在一个 <code>UINavigationController</code> 的 view 内再提供出去。注意这个方法会被 <code>UIKit</code> 调用多次，所以不能在这里进行视图结构的设置，这些应该在第 8 步完成，这里需要迅速返回一个 view。额外扯一下，这是一个微妙的能力，因为国内 iOS 开发者肯定是开发 iPhone app 居多，我们在 present 一个 vc 之前是不是基本上都需要把它包在一个 <code>UINavigationController</code> 内呢？那么在 iOS 8 之后，我们可以指定 present 的 controller 是一个会把 presented vc 包装在 <code>UINavigationController</code> 内的 presentation controller，然后只管 present 就行。从实际看它省不了代码（反而还变多了…），不过从另一方面来看它解耦了代码的逻辑：vc 做的事情已经够多了，包装 presented vc 这样的杂事还是交给一个专门的 controller 来做。。。</li>
<li>然后我们的 animator 的 <code>transitionDuration(_ transitionContext:)</code> 以及 <code>animateTransition(_ transitionContext:)</code> 被调用，开始进行自定义 presentation 的动画。这里当我们从 context 中取 <code>toViewController</code> 的 <code>finalFrame</code> 时，实际是从 <code>UIPresentationController</code> 的 <code>frameOfPresentedViewInContainerView()</code> 中拿的，<code>frameOfPresentedViewInContainerView()</code> 默认返回 container view 的大小，而在我们的实现中需要 presented vc 的 view 比整个屏幕小一圈，所以我们返回一个自己算的 frame。<code>UIKit</code> 会调用 <code>frameOfPresentedViewInContainerView()</code> 多次，所以这里的计算不能太复杂。这里有个微妙的地方是：这里的 frame 是 presented view 在 container view 中的 frame，而我们实际是把 presented view 加在了自己的 <code>dimmingView</code> 上的，因此这里要注意一致性。我们的 animator 提供的自定义动画会和之前 <code>UIPresentationController</code> 中 <code>presentationTransitionWillBegin()</code> 里 coordinator 设置的动画同时进行。</li>
<li>在动画真正跑起来之前，<code>containerViewWillLayoutSubviews()</code> 以及 <code>containerViewDidLayoutSubviews()</code> 会被调用，这里 Apple 的说法是在 <code>containerViewWillLayoutSubviews()</code> 里调整自定义 view 的位置（我们的 <code>dimmingView</code>的位置就是在这里设置的），在 <code>containerViewDidLayoutSubviews()</code> 里对视图结构再作额外的调整。</li>
<li>经过我们在 animator 里设置好的时间，animator 的动画跑完了，其 completion handler 被调用。</li>
<li><code>presentationTransitionDidEnd(completed:)</code> 被调用，这里如果是未完成的话（比如是 interactive 的 presentation，人为取消了）我们需要把 <code>dimmingView</code> 移除掉，毕竟是自己加上去的。</li>
<li>至此整个 presentation 就算完成了，<code>presentViewController:animated:completion:</code> 的 completion 会被调用。</li>
<li>有趣的是，之前通过 coordinator 设置好的动画的 completion 是最后被调用的。</li>
</ol>
<p>以上就是 presentation 过程 <code>UIPresentationController</code> 在 <code>UIKit</code> 中是如何工作的详解，知道了这些，我们在使用 <code>UIPresentationController</code> 进行自定义 presentation 的过程中就能最大限度地与之配合好好工作了。</p>
<p>有 present 就要有 dismiss，dismiss 的过程与之是类似的，这里不再描述。</p>
<p><code>UIPresentationController</code> 还能通过其 <code>delegate</code> 配合设备的 trait collection 的变化进行 adaptive 的调整。</p>
<p>看到这里是不是额头上已经冒汗了？搞这么麻烦究竟是为什么啊？</p>
<h1 id="Why_3F"><a href="#Why_3F" class="headerlink" title="Why?"></a>Why?</h1><p>我对 <code>UIPresentationController</code> 的理解是逻辑的解耦。通过 <code>UIPresentationController</code>，被 present 的 vc 可以不必知道自己还需要提供一个半透明的视图能透过去看到 presenting vc，它只需要提供自己的 view 出来；而 presenting vc 也不必亲自对 presented vc 的 view 进行额外处理（比如将其 embed 到 <code>UINavigationController</code>），它只需要调用 present 就行，present 相关的逻辑都由 <code>UIPresentationController</code> 来处理；animator 纯粹就是用来 animate presentation 的过程，它不需要知道任何造成耦合的假设，任何信息都从 context 中直接拿；present 完成后，整个 presentation 的环境可以是 adaptive 的（通过 <code>UIAdaptivePresentationControllerDelegate</code>），并且这个 adaptive 的能力是由 presentation controller 提供的，被 present 的 vc 只要管好自己的 view 就行。</p>
<p>经过以上的分析，是不是能够理解 Apple 这样调整的理由了呢？</p>
<hr>
<p>Written by 饿了么iOS组 － <a href="https://github.com/axl411" target="_blank" rel="external">axl411</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在大多数 app 都已经支持 iOS 7+ 有一段时间了，距离支持 iOS 8+ 的时间也是屈指可数（希望如此…）了。iOS 8 新增的 API 中有一个 <code>UIPresentationController</code> 一直比较陌生，本文将简略介绍使用 <co]]>
    </summary>
    
      <category term="Custom Presentation" scheme="http://eleme.io/mobilists/tags/Custom-Presentation/"/>
    
      <category term="UIPresentationController" scheme="http://eleme.io/mobilists/tags/UIPresentationController/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/tags/iOS/"/>
    
      <category term="iOS 8" scheme="http://eleme.io/mobilists/tags/iOS-8/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[突破微信跳转限制－Universal Links那些坑]]></title>
    <link href="http://eleme.io/mobilists/2016/01/10/%E7%AA%81%E7%A0%B4%E5%BE%AE%E4%BF%A1%E8%B7%B3%E8%BD%AC%E9%99%90%E5%88%B6%EF%BC%8DUniversal-Links%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://eleme.io/mobilists/2016/01/10/突破微信跳转限制－Universal-Links那些坑/</id>
    <published>2016-01-10T13:43:29.000Z</published>
    <updated>2016-01-12T02:36:06.000Z</updated>
    <content type="html"><![CDATA[<p>微信屏蔽了在其内部webview中大部分URL Scheme跳转（除了一个白名单比如点评），目前突破这个限制有两种方案</p>
<ul>
<li>WXAppExtendObject: 这个用法自查</li>
<li>Universal Links: 文档在<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="external">这里</a> ，工作原理，如何实现，直接参考官方文档即可</li>
</ul>
<p>但是我们按照文档支持了Universal Links，却在iOS9.2开始发现不work了，那么下面开始尝试解决问题</p>
<h2 id="App_Search_API_Validation_Tool"><a href="#App_Search_API_Validation_Tool" class="headerlink" title="App Search API Validation Tool"></a>App Search API Validation Tool</h2><hr>
<p>apple官方有出一个工具－<a href="https://search.developer.apple.com/appsearch-validation-tool/" target="_blank" rel="external">App Search API Validation Tool</a>，这个工具可以测试网站对iOS9 search API的支持，其中包括了对Universal Links的配置检查</p>
<p>但是这个工具对我们网站检查的结果是 <code>passed</code></p>
<h2 id="iOS_u7AEF_u8868_u73B0_u5206_u6790"><a href="#iOS_u7AEF_u8868_u73B0_u5206_u6790" class="headerlink" title="iOS端表现分析"></a>iOS端表现分析</h2><hr>
<p>iOS 9.2开始具体变现如下：</p>
<ul>
<li>Safari中点击符合条件的Link，没有跳转App，但是长按链接能弹出用饿了么打开链接的选项</li>
<li>信息app内点击指定Link，works</li>
<li>微信中打开对应的web，点击符合条件的Link，没有跳转App</li>
</ul>
<p>看起来iOS 9.2肯定是有修改相关的机制，但是Apple并没有提供相应的修改说明（反正我们没有搜到），这个也符合apple一贯的作风</p>
<h2 id="u7B54_u6848"><a href="#u7B54_u6848" class="headerlink" title="答案"></a>答案</h2><p>感谢 <a href="https://dev.branch.io" target="_blank" rel="external">Branch Metrics</a>，我在<a href="https://dev.branch.io/recipes/branch_universal_links/ios/#which-appsbrowsers-support-universal-links" target="_blank" rel="external">这里</a>找到了答案</p>
<p>贴上所有的注意点</p>
<ul>
<li>Universal Links will not work if you paste the link into the browser URL field.</li>
<li>Universal Links work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click across domains. Example: if there is a Universal Link on google.com pointing to bnc.lt, it will open the app.</li>
<li>Universal Links will not work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click on the same domain. Example: if there is a Universal Link on google.com pointing to a different Universal Link on google.com, it will not open the app.</li>
<li>Universal Links cannot be triggered via Javascript (in window.onload or via a .click() call on an <code>&lt;a&gt;</code> element), unless it is part of a user action.</li>
</ul>
<p>也就是从iOS 9.2开始，在相同的domain内Universal Links是不work的，必须要跨域才生效，我们实测值需要跨子域名即可，比如 m.domain.com 跳转 o.domain.com 是可以触发跳转App</p>
<p>Written by 饿了么iOS组 － Bryan</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>微信屏蔽了在其内部webview中大部分URL Scheme跳转（除了一个白名单比如点评），目前突破这个限制有两种方案</p>
<ul>
<li>WXAppExtendObject: 这个用法自查</li>
<li>Universal Links: 文档在<a href="]]>
    </summary>
    
      <category term="Universal Links" scheme="http://eleme.io/mobilists/tags/Universal-Links/"/>
    
      <category term="Wechat" scheme="http://eleme.io/mobilists/tags/Wechat/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/tags/iOS/"/>
    
      <category term="iOS" scheme="http://eleme.io/mobilists/categories/iOS/"/>
    
  </entry>
  
</feed>
